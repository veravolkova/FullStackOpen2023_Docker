{"version":3,"sources":["components/Filter.js","components/PersonList.js","components/PersonForm.js","components/Notification.js","services/entries.js","App.js","serviceWorker.js","index.js"],"names":["Filter","props","value","onChange","PersonList","persons","map","person","i","key","name","number","onClick","handleDelete","id","PersonForm","onSubmit","nameValue","onChangeName","numberValue","onChangeNumber","type","Notification","message","className","baseUrl","axios","get","then","response","data","newObject","post","put","delete","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","searchTerm","setSearchTerm","searchResults","setSearchResults","setMessage","messageType","setMessageType","useEffect","results","filter","toLowerCase","includes","entriesService","initialPersons","personsToShow","event","target","preventDefault","personObject","length","entry","find","p","changedEntry","window","confirm","returnedPerson","setTimeout","catch","error","concat","console","log","res","filteredPersons","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cbebd551.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nexport default function Filter(props) {\r\n  return (\r\n    <div>\r\n      filter shown with:\r\n      <input value={props.value} onChange={props.onChange} />\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function PersonList(props) {\r\n  return (\r\n    <ul>\r\n      {props.persons.map((person, i) => (\r\n        <li key={i}> {person.name} {person.number}\r\n          <button onClick={() => props.handleDelete(person.id, person.name)}>delete</button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\n\r\nexport default function PersonForm(props) {\r\n  return (\r\n    <form onSubmit={props.onSubmit}>\r\n      <div>\r\n        name:\r\n        <input value={props.nameValue} onChange={props.onChangeName} />\r\n      </div>\r\n      <div>\r\n        number:\r\n        <input value={props.numberValue} onChange={props.onChangeNumber} />\r\n      </div>\r\n      <button type='submit'>save</button>\r\n    </form>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nconst Notification = ({ message, type }) => {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className={type}>\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\nexport default Notification","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n};\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n};\r\n\r\nconst update = (id, newObject) => { \r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)  \r\n};\r\n\r\nconst remove = (id) => { \r\n  const request = axios.delete(`${baseUrl}/${id}`)\r\n  return request.then(response => response.data)  \r\n}; \r\n\r\nexport default { getAll, create, update, remove }\r\n","import React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport PersonList from './components/PersonList'\nimport PersonForm from './components/PersonForm'\nimport Notification from './components/Notification'\nimport entriesService from './services/entries'\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [searchTerm, setSearchTerm] = useState('')\n  const [searchResults, setSearchResults] = useState([])\n  const [message, setMessage] = useState('')\n  const [messageType, setMessageType] = useState('')\n\n  useEffect(() => {\n    const results = persons.filter(person =>\n      person.name.toLowerCase().includes(searchTerm.toLowerCase())\n    )\n    setSearchResults(results)\n  }, [persons, searchTerm])\n\n  useEffect(() => {\n    entriesService.getAll().then(initialPersons => {\n      setPersons(initialPersons)\n    })\n  }, [])\n\n  const addPerson = event => {\n    event.preventDefault()\n    const personObject = {\n      name: newName,\n      number: newNumber,\n      id: persons.length + 1\n    }\n\n    const entry = persons.find(p => p.name === newName)\n    const changedEntry = { ...entry, number: personObject.number }\n\n    if (!entry) {\n      entriesService.create(personObject).then(returnedPerson => {\n        setPersons(persons.concat(returnedPerson))\n        setNewName('')\n        setNewNumber('')\n        setMessage(\n          `${personObject.name} has been added to the contact list.`\n        )\n        setMessageType('success')\n        setTimeout(() => {\n          setMessage(null)\n        }, 2000)\n      })\n        .catch(error => {\n          setMessageType('error')\n          setMessage(\n            // `Contact '${personObject.name}' can't be added`\n            error.response.data.error\n          )\n          setTimeout(() => {\n            setMessage(null)\n          }, 2000)\n        })\n    }\n\n    else if (entry && window.confirm(`Update phone for ${entry.name}?`)) {\n      entriesService\n        .update(entry.id, changedEntry)\n        .then(returnedPerson => {\n          setPersons(\n            persons.map(p => (p.id !== entry.id ? p : returnedPerson))\n          )\n          setMessage(\n            `Contact for ${entry.name} has been updated.`\n          )\n          setMessageType('success')\n          setTimeout(() => {\n            setMessage(null)\n          }, 2000)\n        })\n        .catch(error => {\n          setMessageType('error')\n          setMessage(\n            `Update for contact '${entry.name}' has not succeeded`\n          )\n          setTimeout(() => {\n            setMessage(null)\n          }, 2000)\n        })\n    }\n  }\n\n  const handleDelete = (id, name) => {\n    if (window.confirm(`Delete ${name}?`)) {\n      entriesService\n        .remove(id, name)\n        .then(res => {\n          const filteredPersons = persons.filter(p => p.id !== id)\n          setPersons(filteredPersons)\n          setMessage(\n            `${name} has been removed from the contact list.`\n          )\n          setMessageType('success')\n          setTimeout(() => {\n            setMessage(null)\n          }, 2000)\n        })\n        .catch(error => {\n          setMessageType('error')\n          setMessage(\n            `Contact '${name}' can't be removed from server`\n          )\n          setTimeout(() => {\n            setMessage(null)\n          }, 2000)\n        })\n    }\n  }\n\n  const handleSearchChange = event => {\n    setSearchTerm(event.target.value)\n  }\n\n  const handleNameChange = event => {\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = event => {\n    console.log(event.target.value)\n    setNewNumber(event.target.value)\n  }  \n\n  const personsToShow = searchTerm ? searchResults : persons\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Filter value={searchTerm} onChange={handleSearchChange} />\n\n      <PersonForm\n        onSubmit={addPerson}\n        nameValue={newName}\n        onChangeName={handleNameChange}\n        numberValue={newNumber}\n        onChangeNumber={handleNumberChange}\n      />\n\n      <h2>Numbers</h2>\n      <Notification message={message} type={messageType} />\n      <PersonList persons={personsToShow} handleDelete={handleDelete} />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}